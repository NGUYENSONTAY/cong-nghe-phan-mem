#!/bin/bash

# ==================== BOOKSTORE STARTUP SCRIPT ====================
# Script kh·ªüi ƒë·ªông to√†n b·ªô h·ªá th·ªëng Website B√°n S√°ch
# H·ªó tr·ª£ ch·∫°y v·ªõi Docker ho·∫∑c local development

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# ==================== FUNCTIONS ====================

print_header() {
    echo -e "${BLUE}"
    echo "======================================"
    echo "    üöÄ WEBSITE B√ÅN S√ÅCH STARTUP     "
    echo "======================================"
    echo -e "${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

check_requirements() {
    print_info "Ki·ªÉm tra requirements..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
        exit 1
    fi
    
    print_success "Docker v√† Docker Compose ƒë√£ s·∫µn s√†ng"
}

start_docker() {
    print_info "Kh·ªüi ƒë·ªông v·ªõi Docker Compose..."
    
    # Stop existing containers
    docker-compose down 2>/dev/null || true
    
    # Remove orphaned containers
    docker-compose down --remove-orphans 2>/dev/null || true
    
    # Build and start services
    print_info "Building v√† starting services..."
    docker-compose up --build -d
    
    if [ $? -eq 0 ]; then
        print_success "H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng v·ªõi Docker!"
        print_services_info
    else
        print_error "L·ªói khi kh·ªüi ƒë·ªông v·ªõi Docker"
        exit 1
    fi
}

start_local() {
    print_info "Kh·ªüi ƒë·ªông local development..."
    
    # Check Java
    if ! command -v java &> /dev/null; then
        print_error "Java ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
        exit 1
    fi
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        print_error "Node.js ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!"
        exit 1
    fi
    
    # Start MySQL with Docker
    print_info "Kh·ªüi ƒë·ªông MySQL..."
    docker-compose up -d mysql
    
    # Wait for MySQL
    print_info "ƒê·ª£i MySQL kh·ªüi ƒë·ªông..."
    sleep 10
    
    # Start Backend
    print_info "Kh·ªüi ƒë·ªông Backend..."
    cd backend
    if [ ! -f "target/bookstore-backend-1.0.0.jar" ]; then
        print_info "Building backend..."
        ./mvnw clean package -DskipTests
    fi
    ./mvnw spring-boot:run &
    BACKEND_PID=$!
    cd ..
    
    # Start Frontend
    print_info "Kh·ªüi ƒë·ªông Frontend..."
    cd frontend
    if [ ! -d "node_modules" ]; then
        print_info "Installing frontend dependencies..."
        npm install
    fi
    npm start &
    FRONTEND_PID=$!
    cd ..
    
    print_success "H·ªá th·ªëng local development ƒë√£ kh·ªüi ƒë·ªông!"
    print_services_info
    
    # Wait for user to stop
    echo -e "${YELLOW}Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng h·ªá th·ªëng...${NC}"
    trap "kill $BACKEND_PID $FRONTEND_PID 2>/dev/null; docker-compose stop mysql; exit" INT
    wait
}

print_services_info() {
    echo ""
    echo -e "${GREEN}üåê C√ÅC D·ªäCH V·ª§ ƒêANG CH·∫†Y:${NC}"
    echo "======================================"
    echo -e "üñ•Ô∏è  Frontend:      ${BLUE}http://localhost:3000${NC}"
    echo -e "üîß Backend API:    ${BLUE}http://localhost:8080${NC}"
    echo -e "üìä Database Admin: ${BLUE}http://localhost:8090${NC}"
    echo "======================================"
    echo ""
    echo -e "${GREEN}üë§ T√ÄI KHO·∫¢N TEST:${NC}"
    echo -e "Admin:    ${YELLOW}admin@bookstore.com${NC} / ${YELLOW}admin123${NC}"
    echo -e "Customer: ${YELLOW}customer1@example.com${NC} / ${YELLOW}password123${NC}"
    echo ""
}

show_logs() {
    print_info "Hi·ªÉn th·ªã logs c·ªßa t·∫•t c·∫£ services..."
    docker-compose logs -f
}

stop_services() {
    print_info "D·ª´ng t·∫•t c·∫£ services..."
    docker-compose down
    print_success "ƒê√£ d·ª´ng t·∫•t c·∫£ services!"
}

restart_services() {
    print_info "Restart t·∫•t c·∫£ services..."
    docker-compose restart
    print_success "ƒê√£ restart t·∫•t c·∫£ services!"
}

show_status() {
    print_info "Tr·∫°ng th√°i c√°c services:"
    docker-compose ps
}

clean_system() {
    print_warning "X√≥a t·∫•t c·∫£ containers, images v√† volumes..."
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose down -v --rmi all
        docker system prune -f
        print_success "ƒê√£ clean to√†n b·ªô h·ªá th·ªëng!"
    else
        print_info "H·ªßy clean system."
    fi
}

show_help() {
    echo "C√°ch s·ª≠ d·ª•ng: $0 [OPTION]"
    echo ""
    echo "T√ôYCH·ªåN:"
    echo "  start, -s           Kh·ªüi ƒë·ªông v·ªõi Docker (m·∫∑c ƒë·ªãnh)"
    echo "  local, -l           Kh·ªüi ƒë·ªông local development"
    echo "  logs, -lg           Xem logs c·ªßa t·∫•t c·∫£ services"
    echo "  stop, -st           D·ª´ng t·∫•t c·∫£ services"
    echo "  restart, -r         Restart t·∫•t c·∫£ services"
    echo "  status, -stat       Xem tr·∫°ng th√°i services"
    echo "  clean, -c           Clean to√†n b·ªô system"
    echo "  help, -h            Hi·ªÉn th·ªã help"
    echo ""
    echo "V√ç D·ª§:"
    echo "  $0                  # Kh·ªüi ƒë·ªông v·ªõi Docker"
    echo "  $0 local            # Kh·ªüi ƒë·ªông local development"
    echo "  $0 logs             # Xem logs"
    echo "  $0 stop             # D·ª´ng services"
}

# ==================== MAIN SCRIPT ====================

print_header

# Parse command line arguments
case "${1:-start}" in
    "start"|"-s"|"")
        check_requirements
        start_docker
        ;;
    "local"|"-l")
        start_local
        ;;
    "logs"|"-lg")
        show_logs
        ;;
    "stop"|"-st")
        stop_services
        ;;
    "restart"|"-r")
        restart_services
        ;;
    "status"|"-stat")
        show_status
        ;;
    "clean"|"-c")
        clean_system
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        print_error "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
        show_help
        exit 1
        ;;
esac 