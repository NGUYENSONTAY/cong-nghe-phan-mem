package com.bookstore.config;

import com.bookstore.entity.*;
import com.bookstore.repository.*;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.event.ApplicationReadyEvent;
import org.springframework.context.event.EventListener;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;

import java.math.BigDecimal;
import java.time.LocalDate;

@Component
public class DataSeeder {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private CategoryRepository categoryRepository;

    @Autowired
    private AuthorRepository authorRepository;

    @Autowired
    private BookRepository bookRepository;

    @Autowired
    private PasswordEncoder passwordEncoder;

    @EventListener
    public void seed(ApplicationReadyEvent event) {
        if (shouldSeedData()) {
            seedUsers();
            seedCategories();
            seedAuthors();
            seedBooks();
            System.out.println("‚úÖ D·ªØ li·ªáu m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!");
        } else {
            System.out.println("‚ÑπÔ∏è D·ªØ li·ªáu ƒë√£ t·ªìn t·∫°i, b·ªè qua vi·ªác t·∫°o d·ªØ li·ªáu m·∫´u.");
        }
    }

    private boolean shouldSeedData() {
        return userRepository.count() == 0 && categoryRepository.count() == 0;
    }

    private void seedUsers() {
        // T·∫°o admin user
        User admin = new User();
        admin.setEmail("admin@bookstore.com");
        admin.setUsername("admin");
        admin.setPassword(passwordEncoder.encode("admin123"));
        admin.setFirstName("Admin");
        admin.setLastName("User");
        admin.setPhone("0901234567");
        admin.setAddress("123 Admin Street, Ho Chi Minh City");
        admin.setRole(Role.ADMIN);
        userRepository.save(admin);

        // T·∫°o customer users
        User customer1 = new User();
        customer1.setEmail("customer1@example.com");
        customer1.setUsername("customer1");
        customer1.setPassword(passwordEncoder.encode("password123"));
        customer1.setFirstName("Nguy·ªÖn");
        customer1.setLastName("VƒÉn A");
        customer1.setPhone("0987654321");
        customer1.setAddress("456 Nguyen Trai, District 1, Ho Chi Minh City");
        customer1.setRole(Role.CUSTOMER);
        userRepository.save(customer1);

        User customer2 = new User();
        customer2.setEmail("customer2@example.com");
        customer2.setUsername("customer2");
        customer2.setPassword(passwordEncoder.encode("password123"));
        customer2.setFirstName("Tr·∫ßn");
        customer2.setLastName("Th·ªã B");
        customer2.setPhone("0976543210");
        customer2.setAddress("789 Le Loi, District 3, Ho Chi Minh City");
        customer2.setRole(Role.CUSTOMER);
        userRepository.save(customer2);

        System.out.println("üßë‚Äçüíº ƒê√£ t·∫°o users: admin, customer1, customer2");
    }

    private void seedCategories() {
        String[] categoryData = {
            "VƒÉn h·ªçc,S√°ch vƒÉn h·ªçc trong v√† ngo√†i n∆∞·ªõc",
            "Khoa h·ªçc,S√°ch v·ªÅ khoa h·ªçc v√† c√¥ng ngh·ªá",
            "L·ªãch s·ª≠,S√°ch l·ªãch s·ª≠ v√† vƒÉn h√≥a",
            "Kinh t·∫ø,S√°ch v·ªÅ kinh t·∫ø v√† qu·∫£n l√Ω",
            "C√¥ng ngh·ªá,S√°ch v·ªÅ l·∫≠p tr√¨nh v√† IT",
            "T√¢m l√Ω,S√°ch v·ªÅ t√¢m l√Ω h·ªçc v√† ph√°t tri·ªÉn b·∫£n th√¢n",
            "Thi·∫øu nhi,S√°ch d√†nh cho tr·∫ª em",
            "Ti·ªÉu thuy·∫øt,Ti·ªÉu thuy·∫øt v√† truy·ªán ng·∫Øn",
            "Tri·∫øt h·ªçc,S√°ch tri·∫øt h·ªçc v√† t∆∞ duy",
            "Ngo·∫°i ng·ªØ,S√°ch h·ªçc ngo·∫°i ng·ªØ"
        };

        for (String data : categoryData) {
            String[] parts = data.split(",");
            Category category = new Category();
            category.setName(parts[0]);
            category.setDescription(parts[1]);
            categoryRepository.save(category);
        }

        System.out.println("üìö ƒê√£ t·∫°o " + categoryData.length + " th·ªÉ lo·∫°i s√°ch");
    }

    private void seedAuthors() {
        Object[][] authorData = {
            {"Nguy·ªÖn Du", "ƒê·∫°i thi h√†o Vi·ªát Nam, t√°c gi·∫£ Truy·ªán Ki·ªÅu", LocalDate.of(1766, 1, 3), "Vi·ªát Nam"},
            {"H·ªì Ch√≠ Minh", "Ch·ªß t·ªãch H·ªì Ch√≠ Minh, l√£nh t·ª• d√¢n t·ªôc Vi·ªát Nam", LocalDate.of(1890, 5, 19), "Vi·ªát Nam"},
            {"Paulo Coelho", "Nh√† vƒÉn Brazil n·ªïi ti·∫øng th·∫ø gi·ªõi", LocalDate.of(1947, 8, 24), "Brazil"},
            {"Haruki Murakami", "Ti·ªÉu thuy·∫øt gia Nh·∫≠t B·∫£n ƒë∆∞∆°ng ƒë·∫°i", LocalDate.of(1949, 1, 12), "Nh·∫≠t B·∫£n"},
            {"J.K. Rowling", "T√°c gi·∫£ series Harry Potter", LocalDate.of(1965, 7, 31), "Anh"},
            {"Robert T. Kiyosaki", "T√°c gi·∫£ s√°ch v·ªÅ t√†i ch√≠nh c√° nh√¢n", LocalDate.of(1947, 4, 8), "M·ªπ"},
            {"Dale Carnegie", "T√°c gi·∫£ s√°ch v·ªÅ k·ªπ nƒÉng s·ªëng", LocalDate.of(1888, 11, 24), "M·ªπ"},
            {"Yuval Noah Harari", "S·ª≠ gia v√† nh√† vƒÉn Israel", LocalDate.of(1976, 2, 24), "Israel"},
            {"T√¥ Ho√†i", "Nh√† vƒÉn Vi·ªát Nam, t√°c gi·∫£ D·∫ø M√®n phi√™u l∆∞u k√Ω", LocalDate.of(1920, 9, 27), "Vi·ªát Nam"},
            {"Nam Cao", "Nh√† vƒÉn hi·ªán th·ª±c Vi·ªát Nam", LocalDate.of(1915, 10, 29), "Vi·ªát Nam"}
        };

        for (Object[] data : authorData) {
            Author author = new Author();
            author.setName((String) data[0]);
            author.setBiography((String) data[1]);
            author.setBirthDate((LocalDate) data[2]);
            author.setNationality((String) data[3]);
            authorRepository.save(author);
        }

        System.out.println("‚úçÔ∏è ƒê√£ t·∫°o " + authorData.length + " t√°c gi·∫£");
    }

    private void seedBooks() {
        // L·∫•y categories v√† authors
        Category vanHoc = categoryRepository.findByName("VƒÉn h·ªçc").orElse(null);
        Category kinhTe = categoryRepository.findByName("Kinh t·∫ø").orElse(null);
        Category congNghe = categoryRepository.findByName("C√¥ng ngh·ªá").orElse(null);
        Category tamLy = categoryRepository.findByName("T√¢m l√Ω").orElse(null);
        Category tieuThuyet = categoryRepository.findByName("Ti·ªÉu thuy·∫øt").orElse(null);
        Category lichSu = categoryRepository.findByName("L·ªãch s·ª≠").orElse(null);

        Author nguyenDu = authorRepository.findByNameContainingIgnoreCase("Nguy·ªÖn Du").get(0);
        Author hoChiMinh = authorRepository.findByNameContainingIgnoreCase("H·ªì Ch√≠ Minh").get(0);
        Author paulo = authorRepository.findByNameContainingIgnoreCase("Paulo Coelho").get(0);
        Author murakami = authorRepository.findByNameContainingIgnoreCase("Haruki Murakami").get(0);
        Author kiyosaki = authorRepository.findByNameContainingIgnoreCase("Robert T. Kiyosaki").get(0);
        Author carnegie = authorRepository.findByNameContainingIgnoreCase("Dale Carnegie").get(0);
        Author harari = authorRepository.findByNameContainingIgnoreCase("Yuval Noah Harari").get(0);

        Object[][] bookData = {
            {"Truy·ªán Ki·ªÅu", "T√°c ph·∫©m kinh ƒëi·ªÉn c·ªßa vƒÉn h·ªçc Vi·ªát Nam", "978-604-2-123456", new BigDecimal("120000"), 50, "https://www.nxbtre.com.vn/Images/Book/NXBTreStoryFull_03462015_104616.jpg", 400, "Vietnamese", vanHoc, nguyenDu},
            {"Nh·∫≠t k√Ω trong t√π", "T·∫≠p th∆° c·ªßa Ch·ªß t·ªãch H·ªì Ch√≠ Minh", "978-604-2-123457", new BigDecimal("85000"), 30, "https://file3.qdnd.vn/data/images/0/2023/05/12/hoanghoang/a.jpg", 200, "Vietnamese", vanHoc, hoChiMinh},
            {"Nh√† gi·∫£ kim", "C√¢u chuy·ªán v·ªÅ h√†nh tr√¨nh t√¨m ki·∫øm ∆∞·ªõc m∆°", "978-604-2-123458", new BigDecimal("95000"), 100, "https://upload.wikimedia.org/wikipedia/vi/9/9c/Nh%C3%A0_gi%E1%BA%A3_kim_%28s%C3%A1ch%29.jpg", 320, "Vietnamese", tieuThuyet, paulo},
            {"R·ª´ng Na-uy", "Ti·ªÉu thuy·∫øt n·ªïi ti·∫øng c·ªßa Haruki Murakami", "978-604-2-123459", new BigDecimal("150000"), 75, "https://nxbhoinhavan.vn//upload/img_nxb/img_sp_nxb/rung_na_uy.webp", 480, "Vietnamese", tieuThuyet, murakami},
            {"Kafka b√™n b·ªù bi·ªÉn", "T√°c ph·∫©m ƒë·∫∑c s·∫Øc c·ªßa Murakami", "978-604-2-123460", new BigDecimal("180000"), 60, "https://upload.wikimedia.org/wikipedia/vi/5/5b/Kafka_b%C3%AAn_b%E1%BB%9D_bi%E1%BB%83n.JPG", 520, "Vietnamese", tieuThuyet, murakami},
            {"Cha gi√†u Cha ngh√®o", "S√°ch v·ªÅ t√†i ch√≠nh c√° nh√¢n", "978-604-2-123461", new BigDecimal("110000"), 80, "https://taimienphisach.com/wp-content/uploads/2024/08/1162-cha-giau-cha-ngheo-1.jpg", 360, "Vietnamese", kinhTe, kiyosaki},
            {"ƒê·∫Øc nh√¢n t√¢m", "S√°ch v·ªÅ k·ªπ nƒÉng giao ti·∫øp", "978-604-2-123462", new BigDecimal("89000"), 120, "https://nhasachphuongnam.com/images/detailed/217/dac-nhan-tam-bc.jpg", 280, "Vietnamese", tamLy, carnegie},
            {"Sapiens: L∆∞·ª£c s·ª≠ lo√†i ng∆∞·ªùi", "C√¢u chuy·ªán v·ªÅ s·ª± ti·∫øn h√≥a c·ªßa lo√†i ng∆∞·ªùi", "978-604-2-123463", new BigDecimal("220000"), 45, "https://bizweb.dktcdn.net/100/197/269/products/sapiens-luoc-su-ve-loai-nguoi-outline-5-7-2017-02.jpg?v=1520935327270", 600, "Vietnamese", lichSu, harari},
            {"21 b√†i h·ªçc cho th·∫ø k·ª∑ 21", "Nh·ªØng th√°ch th·ª©c c·ªßa th·∫ø k·ª∑ 21", "978-604-2-123464", new BigDecimal("195000"), 55, "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRMIuhAaAI2oyXwBCeYm6VXHxUMhbJeuwSu2g&s", 450, "Vietnamese", lichSu, harari},
            {"Homo Deus", "T∆∞∆°ng lai c·ªßa lo√†i ng∆∞·ªùi", "978-604-2-123465", new BigDecimal("210000"), 40, "https://bizweb.dktcdn.net/thumb/grande/100/326/228/products/homo-deus-by-yuval-noah-harari-bookworm-hanoi-b1ffd05a-fcc7-4ed5-a572-4a9182d902d6.jpg?v=1577764820697", 520, "Vietnamese", lichSu, harari}
        };

        for (Object[] data : bookData) {
            Book book = new Book();
            book.setTitle((String) data[0]);
            book.setDescription((String) data[1]);
            book.setIsbn((String) data[2]);
            book.setPrice((BigDecimal) data[3]);
            book.setStockQuantity((Integer) data[4]);
            book.setImageUrl((String) data[5]);
            book.setPages((Integer) data[6]);
            book.setLanguage((String) data[7]);
            book.setCategory((Category) data[8]);
            book.setAuthor((Author) data[9]);
            bookRepository.save(book);
        }

        System.out.println("üìñ ƒê√£ t·∫°o " + bookData.length + " cu·ªën s√°ch");
    }
} 