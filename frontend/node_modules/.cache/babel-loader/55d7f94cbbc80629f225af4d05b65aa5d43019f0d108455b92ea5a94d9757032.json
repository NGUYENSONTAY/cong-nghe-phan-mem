{"ast":null,"code":"import { api } from './api';\nexport const orderAPI = {\n  createOrder: async orderData => {\n    console.log('ðŸ“¦ Frontend order data:', orderData);\n\n    // Transform frontend data to backend format\n    const backendOrderData = {\n      shippingAddress: orderData.address,\n      // address -> shippingAddress\n      paymentMethod: orderData.paymentMethod,\n      orderItems: orderData.items.map(item => ({\n        bookId: parseInt(item.bookId),\n        // string -> number\n        quantity: item.quantity\n      }))\n    };\n    console.log('ðŸ“¤ Backend order data:', backendOrderData);\n    const response = await api.post('/orders', backendOrderData);\n    console.log('âœ… Backend response:', response.data);\n    return response.data;\n  },\n  getUserOrders: async () => {\n    const response = await api.get('/orders/my-orders');\n    return response.data;\n  },\n  // --- Admin Functions ---\n\n  getAllOrders: async (page, limit, status) => {\n    const response = await api.get('/orders/admin/all', {\n      params: {\n        page,\n        size: limit,\n        status\n      }\n    });\n    const backendData = response.data;\n\n    // Adapt backend Spring Boot pagination format to frontend format  \n    return {\n      data: backendData.content || [],\n      totalItems: backendData.totalElements || 0,\n      totalPages: backendData.totalPages || 0,\n      currentPage: backendData.number || 0\n    };\n  },\n  getOrderById: async id => {\n    const response = await api.get(`/orders/${id}`);\n    return response.data;\n  },\n  updateOrderStatus: async (id, status) => {\n    const response = await api.patch(`/orders/admin/${id}/status`, null, {\n      params: {\n        status\n      }\n    });\n    return response.data;\n  }\n};","map":{"version":3,"names":["api","orderAPI","createOrder","orderData","console","log","backendOrderData","shippingAddress","address","paymentMethod","orderItems","items","map","item","bookId","parseInt","quantity","response","post","data","getUserOrders","get","getAllOrders","page","limit","status","params","size","backendData","content","totalItems","totalElements","totalPages","currentPage","number","getOrderById","id","updateOrderStatus","patch"],"sources":["/home/diengb/bansach/bookstore/frontend/src/api/orderAPI.ts"],"sourcesContent":["import { api } from './api';\nimport { Order, OrderStatus, PaginatedResponse } from '../types';\n\nexport interface CheckoutData {\n  customerName: string;\n  address: string;\n  phone: string;\n  email: string;\n  note?: string;\n  paymentMethod: 'COD' | 'ONLINE';\n  items: { bookId: string; quantity: number }[];\n}\n\nexport const orderAPI = {\n  createOrder: async (orderData: CheckoutData): Promise<Order> => {\n    console.log('ðŸ“¦ Frontend order data:', orderData);\n    \n    // Transform frontend data to backend format\n    const backendOrderData = {\n      shippingAddress: orderData.address, // address -> shippingAddress\n      paymentMethod: orderData.paymentMethod,\n      orderItems: orderData.items.map(item => ({\n        bookId: parseInt(item.bookId), // string -> number\n        quantity: item.quantity\n      }))\n    };\n    \n    console.log('ðŸ“¤ Backend order data:', backendOrderData);\n    \n    const response = await api.post('/orders', backendOrderData);\n    console.log('âœ… Backend response:', response.data);\n    return response.data;\n  },\n\n  getUserOrders: async (): Promise<Order[]> => {\n    const response = await api.get('/orders/my-orders');\n    return response.data;\n  },\n\n  // --- Admin Functions ---\n\n  getAllOrders: async (\n    page: number,\n    limit: number,\n    status?: OrderStatus\n  ): Promise<PaginatedResponse<Order>> => {\n    const response = await api.get('/orders/admin/all', {\n      params: { page, size: limit, status },\n    });\n    \n    const backendData = response.data;\n    \n    // Adapt backend Spring Boot pagination format to frontend format  \n    return {\n      data: backendData.content || [],\n      totalItems: backendData.totalElements || 0,\n      totalPages: backendData.totalPages || 0,\n      currentPage: backendData.number || 0,\n    };\n  },\n\n  getOrderById: async (id: string): Promise<Order> => {\n    const response = await api.get(`/orders/${id}`);\n    return response.data;\n  },\n\n  updateOrderStatus: async (id: string, status: OrderStatus): Promise<Order> => {\n    const response = await api.patch(`/orders/admin/${id}/status`, null, {\n      params: { status }\n    });\n    return response.data;\n  },\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAa3B,OAAO,MAAMC,QAAQ,GAAG;EACtBC,WAAW,EAAE,MAAOC,SAAuB,IAAqB;IAC9DC,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEF,SAAS,CAAC;;IAEjD;IACA,MAAMG,gBAAgB,GAAG;MACvBC,eAAe,EAAEJ,SAAS,CAACK,OAAO;MAAE;MACpCC,aAAa,EAAEN,SAAS,CAACM,aAAa;MACtCC,UAAU,EAAEP,SAAS,CAACQ,KAAK,CAACC,GAAG,CAACC,IAAI,KAAK;QACvCC,MAAM,EAAEC,QAAQ,CAACF,IAAI,CAACC,MAAM,CAAC;QAAE;QAC/BE,QAAQ,EAAEH,IAAI,CAACG;MACjB,CAAC,CAAC;IACJ,CAAC;IAEDZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,gBAAgB,CAAC;IAEvD,MAAMW,QAAQ,GAAG,MAAMjB,GAAG,CAACkB,IAAI,CAAC,SAAS,EAAEZ,gBAAgB,CAAC;IAC5DF,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEY,QAAQ,CAACE,IAAI,CAAC;IACjD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDC,aAAa,EAAE,MAAAA,CAAA,KAA8B;IAC3C,MAAMH,QAAQ,GAAG,MAAMjB,GAAG,CAACqB,GAAG,CAAC,mBAAmB,CAAC;IACnD,OAAOJ,QAAQ,CAACE,IAAI;EACtB,CAAC;EAED;;EAEAG,YAAY,EAAE,MAAAA,CACZC,IAAY,EACZC,KAAa,EACbC,MAAoB,KACkB;IACtC,MAAMR,QAAQ,GAAG,MAAMjB,GAAG,CAACqB,GAAG,CAAC,mBAAmB,EAAE;MAClDK,MAAM,EAAE;QAAEH,IAAI;QAAEI,IAAI,EAAEH,KAAK;QAAEC;MAAO;IACtC,CAAC,CAAC;IAEF,MAAMG,WAAW,GAAGX,QAAQ,CAACE,IAAI;;IAEjC;IACA,OAAO;MACLA,IAAI,EAAES,WAAW,CAACC,OAAO,IAAI,EAAE;MAC/BC,UAAU,EAAEF,WAAW,CAACG,aAAa,IAAI,CAAC;MAC1CC,UAAU,EAAEJ,WAAW,CAACI,UAAU,IAAI,CAAC;MACvCC,WAAW,EAAEL,WAAW,CAACM,MAAM,IAAI;IACrC,CAAC;EACH,CAAC;EAEDC,YAAY,EAAE,MAAOC,EAAU,IAAqB;IAClD,MAAMnB,QAAQ,GAAG,MAAMjB,GAAG,CAACqB,GAAG,CAAC,WAAWe,EAAE,EAAE,CAAC;IAC/C,OAAOnB,QAAQ,CAACE,IAAI;EACtB,CAAC;EAEDkB,iBAAiB,EAAE,MAAAA,CAAOD,EAAU,EAAEX,MAAmB,KAAqB;IAC5E,MAAMR,QAAQ,GAAG,MAAMjB,GAAG,CAACsC,KAAK,CAAC,iBAAiBF,EAAE,SAAS,EAAE,IAAI,EAAE;MACnEV,MAAM,EAAE;QAAED;MAAO;IACnB,CAAC,CAAC;IACF,OAAOR,QAAQ,CAACE,IAAI;EACtB;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}