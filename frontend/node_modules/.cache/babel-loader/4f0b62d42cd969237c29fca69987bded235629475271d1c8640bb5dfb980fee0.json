{"ast":null,"code":"import{api}from'./api';export const orderAPI={createOrder:async orderData=>{console.log('ğŸ“¦ Frontend order data:',orderData);// Transform frontend data to backend format\nconst backendOrderData={shippingAddress:orderData.address,// address -> shippingAddress\npaymentMethod:orderData.paymentMethod,orderItems:orderData.items.map(item=>({bookId:parseInt(item.bookId),// string -> number\nquantity:item.quantity}))};console.log('ğŸ“¤ Backend order data:',backendOrderData);const response=await api.post('/orders',backendOrderData);console.log('âœ… Backend response:',response.data);return response.data;},getUserOrders:async()=>{const response=await api.get('/orders/my-orders');return response.data;},// --- Admin Functions ---\ngetAllOrders:async(page,limit,status)=>{const response=await api.get('/orders/admin/all',{params:{page,size:limit,status}});const backendData=response.data;// Adapt backend Spring Boot pagination format to frontend format  \nreturn{data:backendData.content||[],totalItems:backendData.totalElements||0,totalPages:backendData.totalPages||0,currentPage:backendData.number||0};},getOrderById:async id=>{const response=await api.get(`/orders/${id}`);return response.data;},updateOrderStatus:async(id,status)=>{const response=await api.patch(`/orders/admin/${id}/status`,null,{params:{status}});return response.data;}};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}