{"ast":null,"code":"import { api } from './api';\n// Adapter function to transform backend user response to frontend format\nconst transformBackendUser = backendUser => {\n  return {\n    _id: backendUser.id.toString(),\n    email: backendUser.email,\n    name: `${backendUser.firstName} ${backendUser.lastName}`,\n    address: backendUser.address,\n    phone: backendUser.phone,\n    role: backendUser.role === 'CUSTOMER' ? 'USER' : 'ADMIN',\n    createdAt: backendUser.createdAt || new Date().toISOString(),\n    updatedAt: backendUser.updatedAt || new Date().toISOString()\n  };\n};\nexport const userAPI = {\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return transformBackendUser(response.data);\n  },\n  updateProfile: async data => {\n    const response = await api.put('/users/me', data);\n    return transformBackendUser(response.data);\n  },\n  changePassword: async data => {\n    await api.put('/users/me/password', data);\n  },\n  // --- Admin Functions ---\n\n  getAllUsers: async (page, limit) => {\n    var _backendData$content;\n    const response = await api.get('/users', {\n      params: {\n        page,\n        limit\n      }\n    });\n    const backendData = response.data;\n\n    // Adapt backend Spring Boot pagination format to frontend format\n    return {\n      data: ((_backendData$content = backendData.content) === null || _backendData$content === void 0 ? void 0 : _backendData$content.map(transformBackendUser)) || [],\n      totalItems: backendData.totalElements || 0,\n      totalPages: backendData.totalPages || 0,\n      currentPage: backendData.number || 0\n    };\n  },\n  updateUser: async (userId, data) => {\n    const response = await api.patch(`/users/${userId}`, data);\n    return transformBackendUser(response.data);\n  }\n};","map":{"version":3,"names":["api","transformBackendUser","backendUser","_id","id","toString","email","name","firstName","lastName","address","phone","role","createdAt","Date","toISOString","updatedAt","userAPI","getCurrentUser","response","get","data","updateProfile","put","changePassword","getAllUsers","page","limit","_backendData$content","params","backendData","content","map","totalItems","totalElements","totalPages","currentPage","number","updateUser","userId","patch"],"sources":["/home/diengb/bansach/bookstore/frontend/src/api/userAPI.ts"],"sourcesContent":["import { api } from './api';\nimport { User, AuthResponse, LoginRequest, RegisterRequest, PaginatedResponse, ChangePasswordRequest } from '../types';\n\nexport type UserUpdateData = {\n  name: string;\n  address: string;\n  phone: string;\n};\n\nexport type AdminUserUpdateData = {\n  role: 'USER' | 'ADMIN';\n  // You could add other fields here, e.g., isAccountLocked\n};\n\n// Adapter function to transform backend user response to frontend format\nconst transformBackendUser = (backendUser: any): User => {\n  return {\n    _id: backendUser.id.toString(),\n    email: backendUser.email,\n    name: `${backendUser.firstName} ${backendUser.lastName}`,\n    address: backendUser.address,\n    phone: backendUser.phone,\n    role: backendUser.role === 'CUSTOMER' ? 'USER' : 'ADMIN',\n    createdAt: backendUser.createdAt || new Date().toISOString(),\n    updatedAt: backendUser.updatedAt || new Date().toISOString(),\n  };\n};\n\nexport const userAPI = {\n  getCurrentUser: async (): Promise<User> => {\n    const response = await api.get('/users/me');\n    return transformBackendUser(response.data);\n  },\n\n  updateProfile: async (data: UserUpdateData): Promise<User> => {\n    const response = await api.put('/users/me', data);\n    return transformBackendUser(response.data);\n  },\n\n  changePassword: async (data: ChangePasswordRequest): Promise<void> => {\n    await api.put('/users/me/password', data);\n  },\n  \n  // --- Admin Functions ---\n\n  getAllUsers: async (page: number, limit: number): Promise<PaginatedResponse<User>> => {\n    const response = await api.get('/users', { params: { page, limit } });\n    \n    const backendData = response.data;\n    \n    // Adapt backend Spring Boot pagination format to frontend format\n    return {\n      data: backendData.content?.map(transformBackendUser) || [],\n      totalItems: backendData.totalElements || 0,\n      totalPages: backendData.totalPages || 0,\n      currentPage: backendData.number || 0,\n    };\n  },\n\n  updateUser: async (userId: string, data: AdminUserUpdateData): Promise<User> => {\n    const response = await api.patch(`/users/${userId}`, data);\n    return transformBackendUser(response.data);\n  },\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAc3B;AACA,MAAMC,oBAAoB,GAAIC,WAAgB,IAAW;EACvD,OAAO;IACLC,GAAG,EAAED,WAAW,CAACE,EAAE,CAACC,QAAQ,CAAC,CAAC;IAC9BC,KAAK,EAAEJ,WAAW,CAACI,KAAK;IACxBC,IAAI,EAAE,GAAGL,WAAW,CAACM,SAAS,IAAIN,WAAW,CAACO,QAAQ,EAAE;IACxDC,OAAO,EAAER,WAAW,CAACQ,OAAO;IAC5BC,KAAK,EAAET,WAAW,CAACS,KAAK;IACxBC,IAAI,EAAEV,WAAW,CAACU,IAAI,KAAK,UAAU,GAAG,MAAM,GAAG,OAAO;IACxDC,SAAS,EAAEX,WAAW,CAACW,SAAS,IAAI,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC5DC,SAAS,EAAEd,WAAW,CAACc,SAAS,IAAI,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;EAC7D,CAAC;AACH,CAAC;AAED,OAAO,MAAME,OAAO,GAAG;EACrBC,cAAc,EAAE,MAAAA,CAAA,KAA2B;IACzC,MAAMC,QAAQ,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAAC,WAAW,CAAC;IAC3C,OAAOnB,oBAAoB,CAACkB,QAAQ,CAACE,IAAI,CAAC;EAC5C,CAAC;EAEDC,aAAa,EAAE,MAAOD,IAAoB,IAAoB;IAC5D,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAACuB,GAAG,CAAC,WAAW,EAAEF,IAAI,CAAC;IACjD,OAAOpB,oBAAoB,CAACkB,QAAQ,CAACE,IAAI,CAAC;EAC5C,CAAC;EAEDG,cAAc,EAAE,MAAOH,IAA2B,IAAoB;IACpE,MAAMrB,GAAG,CAACuB,GAAG,CAAC,oBAAoB,EAAEF,IAAI,CAAC;EAC3C,CAAC;EAED;;EAEAI,WAAW,EAAE,MAAAA,CAAOC,IAAY,EAAEC,KAAa,KAAuC;IAAA,IAAAC,oBAAA;IACpF,MAAMT,QAAQ,GAAG,MAAMnB,GAAG,CAACoB,GAAG,CAAC,QAAQ,EAAE;MAAES,MAAM,EAAE;QAAEH,IAAI;QAAEC;MAAM;IAAE,CAAC,CAAC;IAErE,MAAMG,WAAW,GAAGX,QAAQ,CAACE,IAAI;;IAEjC;IACA,OAAO;MACLA,IAAI,EAAE,EAAAO,oBAAA,GAAAE,WAAW,CAACC,OAAO,cAAAH,oBAAA,uBAAnBA,oBAAA,CAAqBI,GAAG,CAAC/B,oBAAoB,CAAC,KAAI,EAAE;MAC1DgC,UAAU,EAAEH,WAAW,CAACI,aAAa,IAAI,CAAC;MAC1CC,UAAU,EAAEL,WAAW,CAACK,UAAU,IAAI,CAAC;MACvCC,WAAW,EAAEN,WAAW,CAACO,MAAM,IAAI;IACrC,CAAC;EACH,CAAC;EAEDC,UAAU,EAAE,MAAAA,CAAOC,MAAc,EAAElB,IAAyB,KAAoB;IAC9E,MAAMF,QAAQ,GAAG,MAAMnB,GAAG,CAACwC,KAAK,CAAC,UAAUD,MAAM,EAAE,EAAElB,IAAI,CAAC;IAC1D,OAAOpB,oBAAoB,CAACkB,QAAQ,CAACE,IAAI,CAAC;EAC5C;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}