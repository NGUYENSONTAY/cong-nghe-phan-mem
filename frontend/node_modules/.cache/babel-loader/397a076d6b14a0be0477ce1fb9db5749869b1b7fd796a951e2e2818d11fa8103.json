{"ast":null,"code":"import { api } from './api';\n// Adapter function to transform backend response to frontend format\nconst transformJwtResponse = backendResponse => {\n  return {\n    token: backendResponse.token,\n    user: {\n      _id: backendResponse.id.toString(),\n      email: backendResponse.email,\n      name: `${backendResponse.firstName} ${backendResponse.lastName}`,\n      role: backendResponse.role === 'CUSTOMER' ? 'USER' : 'ADMIN',\n      createdAt: new Date().toISOString(),\n      // Backend doesn't return this in JWT response\n      updatedAt: new Date().toISOString() // Backend doesn't return this in JWT response\n    }\n  };\n};\nconst login = async credentials => {\n  // Ensure field name matches backend expectation\n  const payload = {\n    usernameOrEmail: credentials.usernameOrEmail,\n    password: credentials.password\n  };\n  const response = await api.post('/auth/login', payload);\n\n  // Transform backend response to frontend format\n  return transformJwtResponse(response.data);\n};\nconst register = async userData => {\n  const response = await api.post('/auth/register', userData);\n  return response.data;\n};\nexport const authAPI = {\n  login,\n  register\n};","map":{"version":3,"names":["api","transformJwtResponse","backendResponse","token","user","_id","id","toString","email","name","firstName","lastName","role","createdAt","Date","toISOString","updatedAt","login","credentials","payload","usernameOrEmail","password","response","post","data","register","userData","authAPI"],"sources":["/home/diengb/bansach/bookstore/frontend/src/api/authAPI.ts"],"sourcesContent":["import { api } from './api';\nimport { AuthResponse, LoginRequest, RegisterRequest, User } from '../types';\n\n// Adapter function to transform backend response to frontend format\nconst transformJwtResponse = (backendResponse: any): AuthResponse => {\n  return {\n    token: backendResponse.token,\n    user: {\n      _id: backendResponse.id.toString(),\n      email: backendResponse.email,\n      name: `${backendResponse.firstName} ${backendResponse.lastName}`,\n      role: backendResponse.role === 'CUSTOMER' ? 'USER' : 'ADMIN',\n      createdAt: new Date().toISOString(), // Backend doesn't return this in JWT response\n      updatedAt: new Date().toISOString(), // Backend doesn't return this in JWT response\n    }\n  };\n};\n\nconst login = async (credentials: LoginRequest): Promise<AuthResponse> => {\n  // Ensure field name matches backend expectation\n  const payload = {\n    usernameOrEmail: credentials.usernameOrEmail,\n    password: credentials.password,\n  };\n  const response = await api.post('/auth/login', payload);\n  \n  // Transform backend response to frontend format\n  return transformJwtResponse(response.data);\n};\n\nconst register = async (userData: RegisterRequest): Promise<any> => {\n  const response = await api.post('/auth/register', userData);\n  return response.data;\n};\n\nexport const authAPI = {\n  login,\n  register,\n}; "],"mappings":"AAAA,SAASA,GAAG,QAAQ,OAAO;AAG3B;AACA,MAAMC,oBAAoB,GAAIC,eAAoB,IAAmB;EACnE,OAAO;IACLC,KAAK,EAAED,eAAe,CAACC,KAAK;IAC5BC,IAAI,EAAE;MACJC,GAAG,EAAEH,eAAe,CAACI,EAAE,CAACC,QAAQ,CAAC,CAAC;MAClCC,KAAK,EAAEN,eAAe,CAACM,KAAK;MAC5BC,IAAI,EAAE,GAAGP,eAAe,CAACQ,SAAS,IAAIR,eAAe,CAACS,QAAQ,EAAE;MAChEC,IAAI,EAAEV,eAAe,CAACU,IAAI,KAAK,UAAU,GAAG,MAAM,GAAG,OAAO;MAC5DC,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;MAAE;MACrCC,SAAS,EAAE,IAAIF,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAAE;IACvC;EACF,CAAC;AACH,CAAC;AAED,MAAME,KAAK,GAAG,MAAOC,WAAyB,IAA4B;EACxE;EACA,MAAMC,OAAO,GAAG;IACdC,eAAe,EAAEF,WAAW,CAACE,eAAe;IAC5CC,QAAQ,EAAEH,WAAW,CAACG;EACxB,CAAC;EACD,MAAMC,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,IAAI,CAAC,aAAa,EAAEJ,OAAO,CAAC;;EAEvD;EACA,OAAOlB,oBAAoB,CAACqB,QAAQ,CAACE,IAAI,CAAC;AAC5C,CAAC;AAED,MAAMC,QAAQ,GAAG,MAAOC,QAAyB,IAAmB;EAClE,MAAMJ,QAAQ,GAAG,MAAMtB,GAAG,CAACuB,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;EAC3D,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CAAC;AAED,OAAO,MAAMG,OAAO,GAAG;EACrBV,KAAK;EACLQ;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}